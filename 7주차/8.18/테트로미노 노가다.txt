#include <iostream>
#include <queue>
using namespace std;

int n, m;
int MAP[500][500];
int ans = -2134567890;
int sum = 0;

// T 방향배열
// 0 : ㅗ
// 1 : ㅏ 
// 2 : ㅓ
// 3 : ㅜ
int tydir[4][4] = {
    {0, 0, -1, 0},
    {0, 1, 1, 2},
    {0, -1, 0, 1},
    {0, 0, 0, 1}
};
int txdir[4][4] = {
    {0, 1, 1, 2},
    {0, 0, 1, 0},
    {0, 1, 1, 1},
    {0, 1, 2, 1}
};

// ㅣ ㅡ 방향배열 
int lydir[2][4] = {
    {0, 0, 0, 0},
    {0, 1, 2, 3}
};
int lxdir[2][4] = {
    {0, 1, 2, 3},
    {0, 0, 0, 0}
};

// ㅁ 방향배열 
int sydir[] = { 0, 0, 1, 1 };
int sxdir[] = { 0, 1, 0, 1 }; 

// L 방향배열 
int Lydir[4][4] = {
    {0, 1, 2, 2},
    {0, 0, 0, -1},
    {0, 0, 1, 2},
    {0, 1, 0, 0}
};
int Lxdir[4][4] = {
    {0, 0, 0, 1},
    {0, 1, 2, 2},
    {0, 1, 1, 1}, 
    {0, 0, 1, 2}
};

// 역 L 방향배열 
int rLydir[4][4] = {
    {0, 1, 2, 2},
    {0, 0, 0, 1},
    {0, 0, 1, 2},
    {0, 1, 1, 1}
};
int rLxdir[4][4] = {
    {0, 0, 0, -1},
    {0, 1, 2, 2},
    {0, 1, 0, 0},
    {0, 0, 1, 2}
};

// ㄹ 방향배열
int zydir[2][4] = {
    {0, 1, 1, 2},
    {0, 0, -1, -1}
};
int zxdir[2][4] = {
    {0, 0, 1, 1},
    {0, 1, 1, 2}
};

// 역  ㄹ방향배열 
int rzydir[2][4] = {
    {0, 1, 1, 2},
    {0, 0, 1, 1}
};
int rzxdir[2][4] = {
    {0, 0, -1, -1},
    {0, 1, 1, 2}
};

void tshape(int y, int x) {
    for (int i = 0; i < 4; i++) {
        int sum = 0;
        for (int j = 0; j < 4; j++) {
            int ny = y + tydir[i][j];
            int nx = x + txdir[i][j];
            // 벗어난다면 T자를만들어볼수 없다!
            if (ny < 0 || nx < 0 || ny >= n || nx >= m) {
                break;
            }
            sum += MAP[ny][nx];
        }
        if (sum > ans)
            ans = sum;
    }
}

void lineshape(int y, int x) {
    for (int i = 0; i < 2; i++) {
        int sum = 0;
        for (int j = 0; j < 4; j++) {
            int ny = y + lydir[i][j];
            int nx = x + lxdir[i][j];
            // 벗어난다면 |자를만들어볼수 없다!
            if (ny < 0 || nx < 0 || ny >= n || nx >= m) {
                break;
            }
            sum += MAP[ny][nx];
        }
        if (sum > ans)
            ans = sum;
    }
}

void squareshape(int y, int x) {
    int sum = 0;
    for (int j = 0; j < 4; j++) {
        int ny = y + sydir[j];
        int nx = x + sxdir[j];
        // 벗어난다면 ㅁ자를만들어볼수 없다!
        if (ny < 0 || nx < 0 || ny >= n || nx >= m) {
            break;
        }
        sum += MAP[ny][nx];
    }
    if (sum > ans)
        ans = sum;
}

void Lshape(int y, int x) {
    for (int i = 0; i < 4; i++) {
        int sum = 0;
        for (int j = 0; j < 4; j++) {
            int ny = y + Lydir[i][j];
            int nx = x + Lxdir[i][j];
            // 벗어난다면 L자를만들어볼수 없다!
            if (ny < 0 || nx < 0 || ny >= n || nx >= m) {
                break;
            }
            sum += MAP[ny][nx];
        }
        if (sum > ans)
            ans = sum;
    }
}

void reverseLshape(int y, int x) {
    for (int i = 0; i < 4; i++) {
        int sum = 0;
        for (int j = 0; j < 4; j++) {
            int ny = y + rLydir[i][j];
            int nx = x + rLxdir[i][j];
            // 벗어난다면 역L자를만들어볼수 없다!
            if (ny < 0 || nx < 0 || ny >= n || nx >= m) {
                break;
            }
            sum += MAP[ny][nx];
        }
        if (sum > ans)
            ans = sum;
    }
}

void  zshape(int y, int x) {
    for (int i = 0; i < 2; i++) {
        int sum = 0;
        for (int j = 0; j < 4; j++) {
            int ny = y + zydir[i][j];
            int nx = x + zxdir[i][j];
            // 벗어난다면 ㄹ자를만들어볼수 없다!
            if (ny < 0 || nx < 0 || ny >= n || nx >= m) {
                break;
            }
            sum += MAP[ny][nx];
        }
        if (sum > ans)
            ans = sum;
    }
}

void  reversezshape(int y, int x) {
    for (int i = 0; i < 2; i++) {
        int sum = 0;
        for (int j = 0; j < 4; j++) {
            int ny = y + rzydir[i][j];
            int nx = x + rzxdir[i][j];
            // 벗어난다면 역ㄹ자를만들어볼수 없다!
            if (ny < 0 || nx < 0 || ny >= n || nx >= m) {
                break;
            }
            sum += MAP[ny][nx];
        }
        if (sum > ans)
            ans = sum;
    }
}

int main() {

    // input 
    cin >> n >> m;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            cin >> MAP[i][j];

    // dfs 
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
                // T 모양 체크
                tshape(i, j);
                // | 모양 체크
                lineshape(i, j);
                // ㅁ 모양 체크
                squareshape(i, j);
                // L 모양 체크
                Lshape(i, j);
                // 역 L 모양 체크 
                reverseLshape(i, j);
                // ㄹ 모양 체크
                zshape(i, j);
                // 역 ㄹ 모양 체크
                reversezshape(i, j);
        }
    }
    cout << ans;
}