#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
using namespace std;

int K;
int h, w;
int arr[110][11];

struct Node {
    int y, x;
};

int directY[4] = { -1, 1, 0, 0 };
int directX[4] = { 0, 0, 1, -1 };

int getSize(int dy, int dx, int used[110][11]) {

    int cnt = 1;

    queue<Node> q;
    used[dy][dx] = 1;
    q.push({ dy, dx });
    int tar = arr[dy][dx];

    while (!q.empty()) {
        Node now = q.front();
        q.pop();

        for (int t = 0; t < 4; t++) {
            int ny = now.y + directY[t];
            int nx = now.x + directX[t];
            if (ny < 0 || nx < 0 || ny >= h || nx >= w) continue;
            if (arr[ny][nx] != tar) continue;
            if (used[ny][nx] == 1) continue;
            used[ny][nx] = 1;
            q.push({ ny, nx });
            cnt++;
        }
    }
    return cnt;
}

void removeSSUM(int dy, int dx) {
    int used[110][11] = { 0 };

    queue<Node> q;
    used[dy][dx] = 1;
    q.push({ dy, dx });
    int tar = arr[dy][dx];
    arr[dy][dx] = 0;

    while (!q.empty()) {
        Node now = q.front();
        q.pop();

        for (int t = 0; t < 4; t++) {
            int ny = now.y + directY[t];
            int nx = now.x + directX[t];
            if (ny < 0 || nx < 0 || ny >= h || nx >= w) continue;
            if (arr[ny][nx] != tar) continue;
            if (used[ny][nx] == 1) continue;
            used[ny][nx] = 1;
            q.push({ ny, nx });
            arr[ny][nx] = 0;
        }
    }
}

int removeUpperK() {
    int used[110][11] = { 0 };
    int flag = 0;
    for (int y = 0; y < h; y++) {
        for (int x = 0; x < w; x++) {
            if (arr[y][x] == 0) continue;
            if (used[y][x] == 1) continue;
            int ret = getSize(y, x, used);
            if (ret >= K) {
                removeSSUM(y, x);
                flag = 1;
            }
        }
    }
    return flag;
}

void down() {

    for (int x = 0; x < w; x++) {
        for (int y = h - 1; y >= 0; y--) {

            //1. 빈 공간부터 찾기
            int flag = -1;
            for (int t = y; t >= 0; t--) {
                if (arr[t][x] == 0) {
                    flag = t;
                    break;
                }
            }

            //빈공간 없으
            if (flag == -1) break;

            //2. 타겟 찾기
            int tar = -1;
            for (int t = flag - 1; t >= 0; t--) {
                if (arr[t][x] != 0) {
                    tar = t;
                    break;
                }
            }

            //2. 못찾았으면
            if (tar == -1) break;

            //3. 이동
            arr[flag][x] = arr[tar][x];
            arr[tar][x] = 0;
        }
    }

}

void doRemoveGetCount() {

    while (1) {
        int ret = removeUpperK();
        if (ret == 0) break;

        down();
    }
}

int main() {
    //freopen_s(new FILE *, "input.txt", "r", stdin);

    w = 10;
    cin >> h >> K;

    for (int y = 0; y < h; y++) {
        string temp;
        cin >> temp;
        for (int i = 0; i < temp.length(); i++) {
            arr[y][i] = temp[i] - '0';
        }
    }
    
    doRemoveGetCount();
    for (int y = 0; y < h; y++) {
        for (int x = 0; x < w; x++) {
            cout << arr[y][x];
        }
        cout << '\n';
    }
    
    return 0;
}