#include <iostream>
#include <vector>
#include <unordered_map>
#include <map>
//map의 장점은 우선순위에 따라 순차적으로 정렬된 구조로 관리를 해줌
// Hash와 관련된 문제는 unordered가 더 빠름


using namespace std;
/*
반번호 (0~10), 학생번호 (0~30)
기반으로 해당 학생의 이름을 찾는 프로그램
*/

struct Da {
	int classNum;
	int StudentNum;
	bool operator == (Da right) const {
		return classNum == right.classNum && StudentNum == right.StudentNum;
	}
};

//위의 코드는 left를 자기 자신으로 작성한것 
//bool operator == (Da left,Da right) {
//	return left.classNum == right.classNum && left.StudentNum == right.StudentNum;
//}

struct HF
{
	size_t operator()(Da key) const {
		return key.classNum * 100 + key.StudentNum;
	}
}; // HF제작

// 해시를 진행하기 위해서
// hash function, 충돌방지가 필요
// 구조체는 우리가 정한거기 떄문에 hash function을 맞게 새로 만들어줘야함


void solution()
{
	unordered_map<Da, string,HF>Da2name;
	Da2name[{21, 1}] = "고수영";
	Da2name[{22, 0}] = "고수일";

	// 이렇게 하면 에러남
	cout << Da2name[{22, 0}]; 
}

int main()
{
	solution();



	
}