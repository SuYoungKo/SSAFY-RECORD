#include<iostream>
#include <queue> 
#include <vector>
#include <algorithm>
using namespace std;

/*
7 8
0 0 0 0 0 0 1 1
1 1 0 0 0 0 1 1
1 1 0 0 0 0 0 0
1 1 0 0 0 1 1 0
0 0 0 0 0 1 1 0
0 0 0 0 0 0 0 0
1 1 1 1 1 1 1 1
*/

struct Node {
    int y;
    int x; 
};

struct Edge {
    int a;
    int b;
    int cost; 
};

bool cmp(Edge a, Edge b) {
    if (a.cost < b.cost)
        return true;
    if (a.cost > b.cost)
        return false;
    return false; 
}

int n, m; 
int MAP[10][10]; 
int visited[10][10]; 
int cnt = 0; // 연결된 다리 개수

int ydir[] = { 0, 0, 1, -1 };
int xdir[] = { 1, -1, 0, 0 }; 

int parent[10]; 

vector <Edge> v; 

void makebridge(int y, int x) {
    // 4 방향을 확인
    for (int i = 0; i < 4; i++) {
        // 일단 한 방향으로 쭈욱뻗어나가야 함
        // 거리를 늘려줘보기위한 거리 변수
        int dist = 1; 
        while (true) {
            int ny = y + ydir[i] * dist; 
            int nx = x + xdir[i] * dist; 
            // 범위체크 -> 한 방향으로 끝까지 체크했으면 
            if (ny < 0 || nx < 0 || ny >= n || nx >= m)
                // 이 방향은 더 체크할 필요 X 
                break; 

            // 이 방향으로 가봤는데, 내 몸의 일부면 체크할 필요 X
            if (MAP[ny][nx] == MAP[y][x])
                break; 

            // 언젠가 (내가 아닌) 다른 섬을 찾았다! 
            if (MAP[ny][nx] != 0) {
                // "두칸째'에 다른 섬이 있다면 -> 그 사이의 거리 = 1 -> 다리못놓는다
                if (dist <= 2)
                    break; 
                // -------- 여기까지 왔다면 ----------- 
                // MAP[y][x] -> MAP[ny][nx] 사이에 dist  거리만큼의 다리를 놓을수 있다!
                v.push_back({ MAP[y][x], MAP[ny][nx], dist - 1 });
                break; 
            }
            // 다음칸까지 가보자!
            dist++; 
         }
    }
}

// y,x = 시작 위치, 
// num = 지금 내가 (y,x)부터 갈수있는 모든 연결된 섬을 바꿀 번호
void bfs(int y, int x, int num) {
    // queue 세팅
    queue<Node> q; 
    q.push({ y, x });

    // visited 세팅 ->밖에서 끝 

    // flood fill
    while (!q.empty()) {
        Node now = q.front();
        q.pop(); 
        // 상하좌우
        for (int i = 0; i < 4; i++) {
            int ny = now.y + ydir[i];
            int nx = now.x + xdir[i];
            // 범위체크
            if (ny < 0 || nx < 0 || ny >= n || nx >= m)
                continue;
            // 섬이 아니면 퍼져나가선 안됨
            if (MAP[ny][nx] != 1)
                continue;
            if (visited[ny][nx] == 1)
                continue;
            visited[ny][nx] = 1;
            q.push({ ny, nx }); 

            // 여기가 지금 원래 시작했던 위치에서 인접한 땅 --> 지금 시작한 섬의 일부
            // 번호를 부여
            MAP[ny][nx] = num; 
        }
    }
}

int Find(int node) {
    if (node == parent[node])
        return node;
    return parent[node] = Find(parent[node]); 
}

void Union(int a, int b) {
    int pa = Find(a);
    int pb = Find(b);
    if (pa == pb)
        return;
    parent[pb] = pa; 
}

int kruskal() {
    int sum = 0; 
    // 정렬 
    sort(v.begin(), v.end(), cmp); 
    for (int i = 0; i < v.size(); i++) {
        Edge now = v[i];
        if (Find(now.a) == Find(now.b))
            continue;
        // 이 두개의 섬이 연결되었다!
        Union(now.a, now.b);
        // 즉, 다리 하나를 두었다! 
        cnt++; 
        sum += now.cost;
    }
    return sum; 
}

int main() {
    cin >> n >> m; 
    // 초기 지도 입력 
    for (int i = 0; i < n; i++) 
        for (int j = 0; j < m; j++)
            cin >> MAP[i][j]; 

    // 1. 섬찾기
    int num = 1; // 저희의 섬의 번호
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            // 어떠한 섬을 하나 발견했다
            if (MAP[i][j] != 0 && visited[i][j] == 0) {
                // 지금 내가 있는 곳에서 연결된 섬을 찾아나갈것 (지금 번호의 섬을 찾는것)
                MAP[i][j] = num; 
                visited[i][j] = 1; 
                bfs(i, j, num);
                num++; // 다음번 섬 번호
            }
        }
    }

    // 2. 다리 놓아보기
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            // 어떤 섬의 위치라면 
            // 여기서부터 상하좌우 방향으로 다리를 1자로 놓아볼겁니다. 
            if (MAP[i][j] > 0)
                // 다리를 한번 놓아볼겁니다
                makebridge(i, j); 
        }
    }
    // int de = 1;

    // 3. MST 구성 
    // 준비물 -> 1. parent, 2. Find, 3. Union 
    //parent 초기화
    //지금 섬의 개수 = num -1개가 있다는 것
    for (int i = 0; i <= num; i++)
        parent[i] = i; 

    // 만약 벡터가 비어있으면 -> kruskal에서 정렬에서 에러
    // 그래서 만약 백터가 비어있다면 => 어차피 못만드니까 그냥 -1출력하고 끝 
    if (v.empty()) {
        cout << -1; 
    }
    else {
        // 일단 뭐라도 edge가 있으면 
        // ** EDGE case : 다리가 연결은 되는데, 모든 섬을 못갈수도 있다! 
        int ans = kruskal(); 
        // MST의 특징 
        // --> 노드 개수가 N개면 -> 간선 개수는 무조건 N-1개
        // 섬개수 - 1개의 다리가 연결됐어? 
        // 지금 섬 개수 : num-1개 -1 
        if (cnt == num - 2)
            cout << ans;
        else
            cout << -1; 
    }
}
