#include <iostream>
#include<vector>
#include<algorithm>
using namespace std;
//int parents[10];
//int GroupCnt[10]; // index : node번호, value : 해당 node가 '대표일 때' 해당 그룹에 '몇 명'이 있는가?
//int GroupMaxNode[10]; // 해당 그룹에서 가장 node번호가 큰 값 <-
//
//int Find(int now)
//{
//    if (parents[now] == now)
//        return now;
//    return parents[now] = Find(parents[now]);
//}
//
//void Union(int A, int B) // 그룹에 변화를 주는 부분
//{
//    int pA = Find(A);
//    int pB = Find(B);
//
//    if (pA == pB) return; // A와 B가 이미 같은 그룹이였다. <- 아무것도 하지 말라고 무시
//    
//    // A와 B가 다른 그룹인 경우
//    // pA를 최종적인 대표로 선발
//    parents[pB] = pA; // 대표를 1명으로 통일
//
//    GroupCnt[pA] += GroupCnt[pB]; // pB가 갖고 있던 정보를 최종 대표인 pA에게 넘겨줌
//    GroupCnt[pB] = 0; // pB는 '대표에서 물러난 점' 대표가 아니므로 정보를 삭제
//
//    GroupMaxNode[pA] = max(GroupMaxNode[pA], GroupMaxNode[pB]);
//    GroupMaxNode[pB] = -1;
//}


struct Edge {
    int from, to, cost;
};
bool cmp(Edge A, Edge B) {
    if (A.cost < B.cost) return true;
    if (A.cost > B.cost) return false;
    return false;
} // 비용이 작은 것부터 나오도록 정렬

vector<Edge> edge;

int parents[10];

int Find(int now) {
    if (now == parents[now])
        return now;
    return parents[now] = Find(parents[now]);
}

void Union(int A, int B) {
    int pA = Find(A);
    int pB = Find(B);
    parents[pB] = pA;
}

int main()
{
    //for (int i = 0; i < 10; i++)
    //{
    //    parents[i] = i; // 자기자신이 대표다.
    //    // GroupCnt 초기화
    //    GroupCnt[i] = 1; // 모두가 '자기자신'이 대표니까 각 그룹마다 1명씩만 있음
    //    GroupMaxNode[i] = i; // 자기자신이 제일 크다.
    //}
    //
    //Union(1, 2);
    //Union(2, 3);
    //Union(1, 4);
    //cout << GroupCnt[ Find(2) ] << "\n";
    //Union(2, 5);
    //Union(6, 7);
    //Union(7, 8);
    //Union(5, 8);
    //cout << GroupCnt[ Find(3) ] << "\n";

    int nodeCnt, edgeCnt;
    cin >> nodeCnt >> edgeCnt;

    for (int i = 1; i <= nodeCnt; i++)
        parents[i] = i; // 각각의 node는 각각 대표이다.

    for (int i = 0; i < edgeCnt; i++)
    {
        int from, to, cost;
        cin >> from >> to >> cost;
        edge.push_back({from, to, cost});
    }

    // 정렬
    sort(edge.begin(), edge.end(), cmp);

    // cost가 작은 edge부터 연결
    int sum = 0; // 최대한 적은 비용으로 모든 node를 연결했을 때의 비용
    for (int i = 0; i < edge.size(); i++)
    {
        // i 번째 edge가 연결하는 두 node(서로 연결, Union)
        int from = edge[i].from;
        int to = edge[i].to;
        
        // from과 to가 '이미' 같은 그룹
        if (Find(from) == Find(to)) continue; // from과 to가 서로 같은 그룹이였으면 '무시'

        Union(from, to); // from과 to를 하나의 그룹으로 만듦
        sum += edge[i].cost; // 이번에 사용한 edge의 비용을 누적
    }
    cout << sum;


    return 0;
}