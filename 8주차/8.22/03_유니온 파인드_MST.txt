#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <string>
#include <stack>
#include <cstring>

using namespace std;

int parent[10];
int GroupCnt[10]; //index : 노드 번호 , value : 해당 노드가 대표일때 해당 그룹에 몇명 있는가?
int GroupMaxNode[10]; // 가장 노드 번호가 큰 값 찾기

struct Edge {
	int from, to, cost;
};

bool cmp(Edge A, Edge B)
{
	if (A.cost < B.cost)return 1;
	if (A.cost > B.cost)return 0;
	return 0;
}


int Find(int now)
{
	if (now == parent[now])
		return now;
	return parent[now] = Find(parent[now]);
}

void Union(int A, int B)
{
	int pA = Find(A);
	int pB = Find(B);
	parent[pB] = pA;
}

vector<Edge>edge;
int parents[10];
int main()
{
	int nodeCnt, edgeCnt;
	cin >> nodeCnt >> edgeCnt;

	for (int i = 1; i <= nodeCnt; i++)
		parent[i] = i;
	for (int i = 0; i < edgeCnt; i++)
	{
		int from, to, cost;
		cin >> from >> to >> cost;
		edge.push_back({ from,to,cost });
	}
	//정렬
	sort(edge.begin(), edge.end(), cmp);

	int sum = 0; // 최대한 적은 비용으로 모든 노드를 연결했을대의 비용
	for (int i = 0; i < edge.size(); i++)
	{
		//i번째 엣지가 연결하는 두 노드 서로 연결(유니온)
		int from = edge[i].from;
		int to = edge[i].to;

		//이미 같은 그룹일경우 무시
		if (Find(from) == Find(to))continue;

		Union(from, to);// from과 to를 하나의 그룹으로 만듬
		sum += edge[i].cost; //이번에 사용한 엣지의 비용을 누적
	}
	cout << sum;
	
}

