#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <string>
#include <stack>
#include <cstring>

using namespace std;

int parent[10];
int GroupCnt[10]; //index : 노드 번호 , value : 해당 노드가 대표일때 해당 그룹에 몇명 있는가?
int GroupMaxNode[10]; // 가장 노드 번호가 큰 값 찾기

int Find(int now)
{
	if (parent[now] == now)
		return now;
	return parent[now] = Find(parent[now]);
}

void Union(int A, int B) //그룹에 변화를 주는 과정
{
	int pA = Find(A);
	int pB = Find(B);
	if (pA == pB)return; // A와B가 이미 같은 그룹이면 무시
	//A와 B가 다른그룹일경우
	parent[pB] = pA; // pA로 대표를 통일
	GroupCnt[pA] += GroupCnt[pB]; // pB가 갖고 있던 정보를 최종 대표인 pA에게 넘겨줌
	GroupCnt[pB] = 0;//pB는 이제 대표가 아니므로 정보를 삭제
	
	GroupMaxNode[pA] = max(GroupMaxNode[pA], GroupMaxNode[pB]);
	GroupMaxNode[pB] = -1;
}

int main()
{
	for (int i = 0; i < 10; i++)
	{
		parent[i] = i; // 자기자신이 대표다
		//GroupCnt 초기화
		GroupCnt[i] = 1; //모두가 자기자신이 대표니까 각 그룹마다 1명씩 있음
		GroupMaxNode[i] = i; // 자기자신이 제일 크다
	
	}
	
	Union(1, 2);
	Union(2, 3);
	Union(1, 4);
	cout << GroupCnt[Find(2)]<<'\n';
	Union(2, 5);
	Union(6, 7);
	Union(7, 8);
	Union(5, 8);
	cout << GroupCnt[Find(3)] << '\n';
	
}

