#include <iostream>
using namespace std;

int n; 
int MAP[16][16];
int visited[16][16]; 
int cnt = 0; 

void dfs(int y, int x, int type) {
    // 기저조건 (필수)
    // (n-1, n-1) 좌표에 도착했을때 -> 하나의 경우의 수를 찾았다! 
    if (y == n - 1 && x == n - 1) {
        // 하나의 경우의수를 찾았다!
        cnt++;
        // 돌아가라!
        return; 
    }

    // 재귀 구성
    // 1번 파이프
    // 1. 범위를 벗어나지 않는다
    // 2. 놓을 수 있다 (방문기록, MAP에서 벽인가? )
    // 3. 1번 -> 2번 파이프에 연결될수 없다
    if (x + 1 < n && visited[y][x + 1] == 0 && MAP[y][x + 1] == 0 && type != 2) {
        // 1번 파이프를 연결할수 있다! 
        // 들어갈때 놓았다 기록 
        visited[y][x + 1] = 1; 
        dfs(y, x + 1, 1); 
        // 나올때 놓은거 해제
        visited[y][x + 1] = 0;
    }

    // 2번 파이프
    if (y + 1 < n && visited[y + 1][x] == 0 && MAP[y + 1][x] == 0 && type != 1) {
        // 2번 파이프를 놓을수 있다!
        visited[y + 1][x] = 1;
        dfs(y + 1, x, 2);
        visited[y + 1][x] = 0; 
    }

    // 3번 파이프 --> 3 방향이 모두 clear
    // 3방향을 체크 -> 방향배열 
    int ydir[] = { 0, 1, 1 };
    int xdir[] = { 1, 1, 0 }; 
    int ccnt = 0;  // 3 방향이 모두 clear한가? 

    for (int i = 0; i < 3; i++) {
        int ny = y + ydir[i];
        int nx = x + xdir[i];
        // 범위를 벗어난다면 continue
        if (ny < 0 || nx < 0 || ny >= n || ny >= n)
            continue;
        if (MAP[ny][nx] == 1)
            continue;
        if (visited[ny][nx] == 1)
            continue;
        // ---- 여기에 놓을수 있다 ---> 여기는 clear하다!
        ccnt++; 
    }

    // 만약 놓을 수 있다면 - dfs 
    if (ccnt == 3) {
        visited[y + 1][x] = 1;
        visited[y + 1][x+1] = 1;
        visited[y][x+1] = 1;
        dfs(y + 1, x + 1, 3);
        visited[y + 1][x] = 0;
        visited[y + 1][x + 1] = 0;
        visited[y][x + 1] = 0;
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie();
    cout.tie(); 

    // input 
    cin >> n;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            cin >> MAP[i][j]; 

    // 1. 문제 이해 -> (0, 0), (0, 1) 좌표에는 1번 파이프가 놓여있다. 
    visited[0][0] = 1; 
    visited[0][1] = 1; 
    // (0,1) 위치에서 1, 2, 3번 파이프를 연결해보면서 (n-1,n-1)위치까지 가는 경우의 수를 찾아보자! 
    // dfs(y좌표, x좌표, 현재 파이프 번호)
    dfs(0, 1, 1);

    cout << cnt;
}